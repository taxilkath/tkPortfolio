---
description: Guidelines for testing and quality assurance
globs:
alwaysApply: false
---

# Testing and Quality Assurance

## Test File Organization

### Test File Locations

- Unit tests: Next to source files as `*.test.ts` or `*.test.tsx`
- E2E tests: [apps/web/src/e2e](mdc:apps/web/src/e2e)
- Test utilities: [apps/web/src/tests](mdc:apps/web/src/tests)
- Component tests: [apps/web/src/tests/components](mdc:apps/web/src/tests/components)

## Unit Testing with Vitest

### Component Testing Pattern

```typescript
// component.test.tsx
import { describe, it, expect, vi } from 'vitest'
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import Component from './component'

describe('Component', () => {
  it('renders with default props', () => {
    render(<Component />)
    expect(screen.getByRole('button')).toBeInTheDocument()
  })

  it('handles user interaction', async () => {
    const user = userEvent.setup()
    const handleClick = vi.fn()

    render(<Component onClick={handleClick} />)

    await user.click(screen.getByRole('button'))
    expect(handleClick).toHaveBeenCalledOnce()
  })

  it('applies conditional styling', () => {
    const { rerender } = render(<Component isActive={false} />)
    expect(screen.getByTestId('component')).not.toHaveClass('active')

    rerender(<Component isActive={true} />)
    expect(screen.getByTestId('component')).toHaveClass('active')
  })
})
```

### Hook Testing

```typescript
// use-hook.test.ts
import { renderHook, act } from '@testing-library/react'
import { useCounter } from './use-counter'

describe('useCounter', () => {
  it('increments counter', () => {
    const { result } = renderHook(() => useCounter())

    expect(result.current.count).toBe(0)

    act(() => {
      result.current.increment()
    })

    expect(result.current.count).toBe(1)
  })
})
```

### API Testing with oRPC

<!-- TODO: Add API testing with oRPC -->

Not applicable currently.

## E2E Testing with Playwright

### Test Structure

```typescript
// apps/web/src/e2e/unauthenticated/home.test.ts
import { test, expect } from '@playwright/test'

test.describe('Home Page', () => {
  test('loads successfully', async ({ page }) => {
    await page.goto('/')

    // Check title
    await expect(page).toHaveTitle(/Taxil/)

    // Check main content
    await expect(page.getByRole('heading', { level: 1 })).toBeVisible()
  })

  test('navigates to blog', async ({ page }) => {
    await page.goto('/')

    await page.getByRole('link', { name: 'Blog' }).click()

    await expect(page).toHaveURL('/blog')
    await expect(page.getByText('Latest Posts')).toBeVisible()
  })
})
```

### Authenticated Tests

```typescript
// apps/web/src/e2e/authenticated/dashboard.test.ts
import { test, expect } from '@playwright/test'
import { login } from '../utils/auth'

test.describe('Dashboard', () => {
  test.beforeEach(async ({ page }) => {
    await login(page)
  })

  test('displays user stats', async ({ page }) => {
    await page.goto('/dashboard')

    await expect(page.getByTestId('total-views')).toBeVisible()
    await expect(page.getByTestId('total-likes')).toBeVisible()
  })
})
```

### Test Utilities

```typescript
// apps/web/src/e2e/utils/auth.ts
export const login = async (page: Page) => {
  await page.goto('/login')
  await page.fill('input[name="email"]', 'test@example.com')
  await page.fill('input[name="password"]', 'password')
  await page.click('button[type="submit"]')
  await page.waitForURL('/')
}

// apps/web/src/e2e/utils/database.ts
export const seedTestData = async () => {
  await db.insert(users).values({
    id: 'test-user',
    email: 'test@example.com',
    name: 'Test User'
  })
}
```

## Quality Checks

### Pre-commit Checks

```bash
# Run all checks before committing
pnpm check

# Individual checks
pnpm lint        # ESLint
pnpm type-check   # TypeScript
pnpm format      # Prettier
```

### Code Coverage

```bash
# Run tests with coverage
pnpm test:coverage

# Coverage thresholds in vitest.config.ts
coverage: {
  thresholds: {
    branches: 80,
    functions: 80,
    lines: 80,
    statements: 80
  }
}
```

## Accessibility Testing

### Component Accessibility

```typescript
// Ensure proper ARIA attributes
<button
  aria-label="Close dialog"
  aria-pressed={isPressed}
  aria-disabled={isDisabled}
>

// Test keyboard navigation
test('supports keyboard navigation', async ({ page }) => {
  await page.goto('/')

  // Tab to first interactive element
  await page.keyboard.press('Tab')

  // Check focus
  const focusedElement = await page.evaluate(() => document.activeElement?.tagName)
  expect(focusedElement).toBe('A')
})
```

### Screen Reader Testing

```typescript
// Use semantic HTML
<nav aria-label="Main navigation">
<main>
<aside aria-label="Sidebar">

// Test with screen reader announcements
await expect(page.getByRole('alert')).toHaveText('Form submitted successfully')
```

## Performance Testing

### Lighthouse CI

```typescript
// lighthouse.test.ts
test('meets performance budget', async ({ page }) => {
  const metrics = await page.evaluate(() => {
    return JSON.stringify(performance.getEntriesByType('navigation'))
  })

  const [navigation] = JSON.parse(metrics)
  expect(navigation.loadEventEnd - navigation.fetchStart).toBeLessThan(3000)
})
```

## Test Commands

```bash
# Run all tests
pnpm test

# Run unit tests only
pnpm test:unit

# Run E2E tests
pnpm test:e2e

# Run E2E in UI mode
pnpm test:e2e:ui

# Run specific test file
pnpm test path/to/test.ts

# Run tests in watch mode
pnpm test:watch
```
